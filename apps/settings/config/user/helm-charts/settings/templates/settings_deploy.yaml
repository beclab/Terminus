

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: settings-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: settings
    applications.app.bytetrade.io/name: settings
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
    applications.app.bytetrade.io/author: bytetrade.io
  annotations:
    applications.app.bytetrade.io/icon: https://file.bttcdn.com/appstore/settings/icon.png
    applications.app.bytetrade.io/title: Settings
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/entrances: '[{"name":"settings", "host":"settings-service", "port":80,"title":"Settings"}]'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: settings
  template:
    metadata:
      labels:
        app: settings
    spec:
      initContainers:
      - name: terminus-sidecar-init
        image: openservicemesh/init:v1.2.3
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities: 
            add:
            - NET_ADMIN
          runAsNonRoot: false
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        - |
          iptables-restore --noflush <<EOF
          # sidecar interception rules
          *nat
          :PROXY_IN_REDIRECT - [0:0]
          :PROXY_INBOUND - [0:0]
          -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
          -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
          -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
          -A PREROUTING -p tcp -j PROXY_INBOUND
          COMMIT
          EOF
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      containers:
      - name: settings
        image: beclab/settings:v0.1.68
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
      
      - name: drive
        image: beclab/drive:v0.0.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080

      - name: settings-server
        image: beclab/settings-server:v0.1.68
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: OS_SYSTEM_SERVER
          value: system-server.user-system-{{ .Values.bfl.username }}
        - name: OS_APP_SECRET
          value: '{{ .Values.os.settings.appSecret }}'
        - name: OS_APP_KEY
          value: {{ .Values.os.settings.appKey }}
        - name: APP_SERVICE_SERVICE_HOST
          value: app-service.os-system
        - name: APP_SERVICE_SERVICE_PORT
          value: '6755'
        - name: APP_SERVICE_CHAIN_ID
          value: '10'
        - name: APP_SERVICE_VERIFYING_CONTRACT
          value: '0xe2eaba0979277a90511f8873ae1e8ca26b54e740'
        - name: APP_SERVICE_CLOUD_URL
          value: 'https://cloud-api.bttcdn.com'
        # value: none / nvidia / nvshare / virtaitech
        - name: GPU
          value: {{ .Values.gpu }}

      - name: terminus-envoy-sidecar
        image: envoyproxy/envoy-distroless:v1.25.2
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        ports:
        - name: proxy-admin
          containerPort: 15000
        - name: proxy-inbound
          containerPort: 15003
        volumeMounts:
        - name: terminus-sidecar-config
          readOnly: true
          mountPath: /etc/envoy/envoy.yaml
          subPath: envoy.yaml
        command:
        - /usr/local/bin/envoy
        - --log-level
        - debug
        - -c
        - /etc/envoy/envoy.yaml
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      volumes:
      - name: terminus-sidecar-config
        configMap:
          name: sidecar-configs
          items:
          - key: envoy.yaml
            path: envoy.yaml
       
---
apiVersion: v1
kind: Service
metadata:
  name: settings-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: settings
  type: ClusterIP
  ports:
    - protocol: TCP
      name: settings
      port: 80
      targetPort: 80
      
---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ApplicationPermission
metadata:
  name: settings
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: settings
  appid: settings
  key: {{ .Values.os.settings.appKey }}
  secret: {{ .Values.os.settings.appSecret }}
  permissions:
  - dataType: config
    group: service.desktop
    ops:
    - Update
    version: v1
  - dataType: secret
    group: secret.infisical
    ops:
    - RetrieveSecret?workspace=settings
    - CreateSecret?workspace=settings
    - DeleteSecret?workspace=settings
    - UpdateSecret?workspace=settings
    - ListSecret?workspace=settings
    version: v1
  - dataType: headscale
    group: service.headscale
    ops:
    - GetMachine
    - RenameMachine
    - DeleteMachine
    - GetRoute
    - EnableRoute
    - DisableRoute
    - SetTags
    version: v1
  - dataType: files
    group: service.files
    ops:
    - Query
    - GetSearchFolderStatus
    - UpdateSearchFolderPaths
    - GetDatasetFolderStatus
    - UpdateDatasetFolderPaths
    version: v1
  - dataType: datastore
    group: service.bfl
    ops:
    - GetKey
    - GetKeyPrefix
    - SetKey
    - DeleteKey
    version: v1
  - dataType: app
    group: service.bfl
    ops:
    - UserApps
    version: v1
  - dataType: config
    group: service.desktop
    ops:
    - Update
    version: v1
status:
  state: active

---
apiVersion: v1
kind: Service
metadata:
  name: vault-admin-server
  namespace: {{ .Release.Namespace }}
spec:
  type: ExternalName
  externalName: vault-server.os-system.svc.cluster.local
  ports:
    - protocol: TCP
      port: 3010
      targetPort: 3010


---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: settings-nft
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: nft
  deployment: settings
  description: Get Cloud Bind NFT List
  endpoint: settings-service.{{ .Release.Namespace }}
  group: service.settings
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: getNFTAddress
    uri: /api/cloud/getNFTAddress
  version: v1
status:
  state: active

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: settings-account
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: account
  deployment: settings
  description: Get Acccount saved in Settings
  endpoint: settings-service.{{ .Release.Namespace }}
  group: service.settings
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: getAccount
    uri: /api/account
  version: v1
status:
  state: active

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: settings-backup-password
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: backupPassword
  deployment: settings
  description: Get Backup Plan's Password
  endpoint: settings-service.{{ .Release.Namespace }}
  group: service.settings
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: getAccount
    uri: /api/backup/password
  version: v1
status:
  state: active

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: settings-event-watcher
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  callbacks:
  - filters:
      type:
      - app-installation-event
    op: Create
    uri: /api/event/app_installation_event
  - filters:
      type:
      - settings-event
    op: Create
    uri: /api/event/app_installation_event
  - filters:
      type:
      - system-upgrade-event
    op: Create
    uri: /api/event/system_upgrade_event
  dataType: event
  deployment: settings
  description: desktop event watcher
  endpoint: settings-service.{{ .Release.Namespace }}
  group: message-disptahcer.system-server
  kind: watcher
  namespace: {{ .Release.Namespace }}
  version: v1
status:
  state: active